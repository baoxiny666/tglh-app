{"remainingRequest":"E:\\VueProject\\tglh-app-living\\tglh-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VueProject\\tglh-app-living\\tglh-app\\src\\components\\ReportRecords\\ReportRecordsList.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VueProject\\tglh-app-living\\tglh-app\\src\\components\\ReportRecords\\ReportRecordsList.vue","mtime":1610449911976},{"path":"E:\\VueProject\\tglh-app-living\\tglh-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610417723000},{"path":"E:\\VueProject\\tglh-app-living\\tglh-app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1610417750390},{"path":"E:\\VueProject\\tglh-app-living\\tglh-app\\node_modules\\babel-loader\\lib\\index.js","mtime":1610417721066},{"path":"E:\\VueProject\\tglh-app-living\\tglh-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610417723000},{"path":"E:\\VueProject\\tglh-app-living\\tglh-app\\node_modules\\vue-loader\\lib\\index.js","mtime":1610417751528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}