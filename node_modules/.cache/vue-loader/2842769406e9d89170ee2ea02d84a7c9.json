{"remainingRequest":"E:\\VueProject\\tglh-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\VueProject\\tglh-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\VueProject\\tglh-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VueProject\\tglh-app\\src\\components\\reportrecords\\ReportRecordsDetail.vue?vue&type=template&id=3f635f44&","dependencies":[{"path":"E:\\VueProject\\tglh-app\\src\\components\\reportrecords\\ReportRecordsDetail.vue","mtime":1610064635237},{"path":"E:\\VueProject\\tglh-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500371},{"path":"E:\\VueProject\\tglh-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500371},{"path":"E:\\VueProject\\tglh-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500371},{"path":"E:\\VueProject\\tglh-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500371}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}